stages:
  - compile
  - test
  - build-container
  - deploy

variables:
  MONGO_INITDB_ROOT_USERNAME: mongodb
  MONGO_INITDB_ROOT_PASSWORD: mongodb

  REPO_NAME: gitlab.com/$CI_PROJECT_PATH
  DOCKER_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH
  OKTETO_REGISTRY: registry.cloud.okteto.net
  OKTETO_IMAGE_TAG: $OKTETO_REGISTRY/$CI_PROJECT_PATH
  TAG: $CI_COMMIT_SHORT_SHA
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

services:
  - name: mongo:4.4.6
    alias: mongodb

.go:
  image: golang:1.16-alpine3.14
  variables:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
    GOPATH: $CI_PROJECT_DIR/.cache
  cache:
    key: $CI_JOB_NAME
    when: always
    paths:
      - $GOPATH
  before_script:
    - mkdir -p .cache
    - go mod download
  artifacts:
    when: always
    reports:
      junit: report.xml

compile:
  stage: compile
  extends: .go
  variables:
    OUTPUT_FILE: main
  script:
    - go build -o $OUTPUT_FILE
  artifacts:
    paths:
      - $OUTPUT_FILE
  rules: &ci_rule
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH =~ /^(test)+/"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

setup-test:
  stage: compile
  image: mongo:4.4.6
  script:
    - mongo --nodb ./tools/initdb.js
  rules: *ci_rule

test:
  stage: test
  extends: .go
  script:
    - apk add --no-cache gcc musl-dev
    - go get gotest.tools/gotestsum
    - gotestsum --junitfile report.xml --format testname
  variables:
    COMPOSE_FILE: "tools/docker-compose.yml"
    MONGO_URI: "mongodb://mongodb:mongodb@mongodb"
  rules: *ci_rule
  needs:
    - setup-test

# build-container:
#   stage: build-container
#   image: docker:19
#   services:
#     - docker:19-dind
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker login -u cjtim -p $(echo $OKTETO_TOKEN | base64 -d) $OKTETO_REGISTRY
#     - docker build -t $DOCKER_IMAGE_TAG:$TAG -f ci.Dockerfile .
#     - docker tag $DOCKER_IMAGE_TAG:$TAG $DOCKER_IMAGE_TAG:latest
#     - docker tag $DOCKER_IMAGE_TAG:$TAG $OKTETO_IMAGE_TAG:$TAG
#     - docker push $DOCKER_IMAGE_TAG
#     - docker push $DOCKER_IMAGE_TAG:latest
#     - docker push $OKTETO_IMAGE_TAG:$TAG
#     - docker logout $CI_REGISTRY
#     - docker logout $OKTETO_REGISTRY
#   dependencies:
#     - compile
#   rules:
#     - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
#     - if: "$CI_COMMIT_BRANCH =~ /^(test)+/"

build-container-okteto:
  stage: build-container
  image: docker:19
  services:
    - docker:19-dind
  script:
    - docker login -u cjtim -p $(echo $OKTETO_TOKEN | base64 -d) $OKTETO_REGISTRY
    - docker build -t $OKTETO_IMAGE_TAG:$TAG -f ci.Dockerfile .
    - docker push $OKTETO_IMAGE_TAG:$TAG
    - docker logout $OKTETO_REGISTRY
  dependencies:
    - compile
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH =~ /^(test)+/"
# deploy:
#   stage: deploy
#   needs:
#     - build-container
#   trigger:
#     project: cjtim/my-server
#     strategy: depend
#   rules:
#     - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
#     - if: "$CI_COMMIT_BRANCH =~ /^(test)+/"

okteto:
  stage: deploy
  needs:
    - build-container-okteto
  image: okteto/okteto:1.13.4
  script:
    - export OKTETO_TOKEN=$(echo $OKTETO_TOKEN | base64 -d)
    - okteto namespace
    - sed -e "s/TAG/$TAG/" k8s/deployment.yaml | kubectl apply -f -
    - kubectl apply -f k8s/service.yaml
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH =~ /^(test)+/"
