stages:
  - compile
  - test
  - build-container
  - review
  - deploy
  - release

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

  REPO_NAME: gitlab.com/$CI_PROJECT_PATH
  DOCKER_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH

  MR_ID: $CI_MERGE_REQUEST_IID
  OKTETO_PREVIEW_NS: "mr-${CI_MERGE_REQUEST_IID}-${CI_PROJECT_ROOT_NAMESPACE}"
  TAG: $CI_COMMIT_SHORT_SHA

.go:
  image: $GO_IMAGE
  variables:
    # for build
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0

    GO_IMAGE: golang:1.16-alpine3.14
    GOPATH: /go
  # cache:
  #   key: ${CI_COMMIT_REF_NAME}
  #   when: on_success
  #   paths:
  #     - $GOPATH
  #     - $CI_PROJECT_DIR/vendor
  before_script:
    - go mod download

.master-and-mr-rules:
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"

compile:
  stage: compile
  extends:
    - .go
    - .master-and-mr-rules
  variables:
    OUTPUT_FILE: main
    MAIN_GO: cmd/cjtim-backend-go/main.go
  script:
    - go build -o $OUTPUT_FILE $MAIN_GO
  artifacts:
    expire_in: 7 days
    paths:
      - $OUTPUT_FILE

test:
  stage: test
  needs: []
  extends:
    - .go
    - .master-and-mr-rules
  variables:
    GO_IMAGE: golang:1.16
  script:
    - go get gotest.tools/gotestsum
    - go get github.com/boumenot/gocover-cobertura

    # test report
    - gotestsum --junitfile report.xml --format testname

    # coverage
    - go test -coverprofile=coverage.txt -covermode count ./...
    - gocover-cobertura < coverage.txt > coverage.xml

    # upload to codecov
    - curl -s https://codecov.io/bash | bash - || true

    # display from coverage.txt
    - go tool cover -func=coverage.txt
  coverage: '/total:.*\d+.\d+%/'
  artifacts:
    when: always
    expire_in: 30 days
    reports:
      junit: report.xml
      cobertura: coverage.xml

build-container-okteto:
  stage: build-container
  extends:
    - .master-and-mr-rules
  image: docker:19
  services:
    - docker:19-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE_TAG:$TAG -f tools/ci.Dockerfile .
    - docker push $DOCKER_IMAGE_TAG:$TAG
    - docker logout $CI_REGISTRY
  needs:
    - compile

review:
  stage: review
  needs:
    - build-container-okteto
  image: okteto/okteto:1.13.4
  variables:
    APP: $OKTETO_PREVIEW_NS
  script:
    - export OKTETO_TOKEN=$(echo $OKTETO_TOKEN | base64 -d)
    - okteto namespace
    - |
      okteto preview deploy $OKTETO_PREVIEW_NS \
      --scope personal \
      --branch $CI_COMMIT_REF_NAME \
      --repository $CI_REPOSITORY_URL \
      --var TAG=$TAG
    - sleep 10
    - |
      kubectl get secret loki --namespace=$CI_PROJECT_ROOT_NAMESPACE -o yaml \
      | sed "s/namespace: $CI_PROJECT_ROOT_NAMESPACE/namespace: $OKTETO_PREVIEW_NS/" \
      | kubectl create --namespace=$OKTETO_PREVIEW_NS -f - || true
    - |
      kubectl get configmap cjtim-backend-go-configmap --namespace=$CI_PROJECT_ROOT_NAMESPACE -o yaml \
      | sed "s/namespace: $CI_PROJECT_ROOT_NAMESPACE/namespace: $OKTETO_PREVIEW_NS/" \
      | kubectl create --namespace=$OKTETO_PREVIEW_NS -f - || true
  environment:
    name: "mr-${CI_MERGE_REQUEST_IID}-${CI_PROJECT_ROOT_NAMESPACE}"
    url: "https://cjtim-backend-go-mr-$CI_MERGE_REQUEST_IID-$CI_PROJECT_ROOT_NAMESPACE.cloud.okteto.net"
    on_stop: stop-review
  only:
    - merge_requests

stop-review:
  stage: review
  image: okteto/okteto:1.13.4
  when: manual
  environment:
    name: "mr-${CI_MERGE_REQUEST_IID}-${CI_PROJECT_ROOT_NAMESPACE}"
    action: stop
  script:
    - export OKTETO_TOKEN=$(echo $OKTETO_TOKEN | base64 -d)
    - okteto namespace
    - okteto preview destroy ${OKTETO_PREVIEW_NS}
  variables:
    GIT_STRATEGY: none
  only:
    - merge_requests

okteto:
  stage: deploy
  needs:
    - build-container-okteto
  image: okteto/okteto:1.13.4
  script:
    - export OKTETO_TOKEN=$(echo $OKTETO_TOKEN | base64 -d)
    - okteto namespace
    - helm upgrade -i cjtim-backend-go helm --set image.tag=$TAG
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

release-tag:
  stage: release
  needs: []
  only:
    - master
  image: 
    name: ghcr.io/go-semantic-release/semantic-release:2.17.0
    entrypoint: [""]
  script:
    - /usr/local/bin/semantic-release || true

release:
  stage: release
  needs: []
  image:
    name: goreleaser/goreleaser
    entrypoint: [""]
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: $CI_COMMIT_TAG
      variables:
        COMMAND: goreleaser release --rm-dist
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      variables:
        COMMAND: goreleaser release --skip-validate --skip-publish --rm-dist
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
  script:
    - $COMMAND
  artifacts:
    expire_in: 7 days
    paths:
      - dist
